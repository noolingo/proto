// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: noolingo/cards.proto

package noolingo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cards_SearchByID_FullMethodName  = "/noolingo.Cards/SearchByID"
	Cards_SearchByRus_FullMethodName = "/noolingo.Cards/SearchByRus"
	Cards_SearchByEng_FullMethodName = "/noolingo.Cards/SearchByEng"
)

// CardsClient is the client API for Cards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardsClient interface {
	SearchByID(ctx context.Context, in *SearchByIDRequest, opts ...grpc.CallOption) (*SearchReply, error)
	SearchByRus(ctx context.Context, in *SearchByRusRequest, opts ...grpc.CallOption) (*SearchReply, error)
	SearchByEng(ctx context.Context, in *SearchByEngRequest, opts ...grpc.CallOption) (*SearchReply, error)
}

type cardsClient struct {
	cc grpc.ClientConnInterface
}

func NewCardsClient(cc grpc.ClientConnInterface) CardsClient {
	return &cardsClient{cc}
}

func (c *cardsClient) SearchByID(ctx context.Context, in *SearchByIDRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, Cards_SearchByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) SearchByRus(ctx context.Context, in *SearchByRusRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, Cards_SearchByRus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) SearchByEng(ctx context.Context, in *SearchByEngRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, Cards_SearchByEng_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardsServer is the server API for Cards service.
// All implementations must embed UnimplementedCardsServer
// for forward compatibility
type CardsServer interface {
	SearchByID(context.Context, *SearchByIDRequest) (*SearchReply, error)
	SearchByRus(context.Context, *SearchByRusRequest) (*SearchReply, error)
	SearchByEng(context.Context, *SearchByEngRequest) (*SearchReply, error)
	mustEmbedUnimplementedCardsServer()
}

// UnimplementedCardsServer must be embedded to have forward compatible implementations.
type UnimplementedCardsServer struct {
}

func (UnimplementedCardsServer) SearchByID(context.Context, *SearchByIDRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByID not implemented")
}
func (UnimplementedCardsServer) SearchByRus(context.Context, *SearchByRusRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByRus not implemented")
}
func (UnimplementedCardsServer) SearchByEng(context.Context, *SearchByEngRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByEng not implemented")
}
func (UnimplementedCardsServer) mustEmbedUnimplementedCardsServer() {}

// UnsafeCardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardsServer will
// result in compilation errors.
type UnsafeCardsServer interface {
	mustEmbedUnimplementedCardsServer()
}

func RegisterCardsServer(s grpc.ServiceRegistrar, srv CardsServer) {
	s.RegisterService(&Cards_ServiceDesc, srv)
}

func _Cards_SearchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).SearchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_SearchByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).SearchByID(ctx, req.(*SearchByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_SearchByRus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByRusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).SearchByRus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_SearchByRus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).SearchByRus(ctx, req.(*SearchByRusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_SearchByEng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByEngRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).SearchByEng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_SearchByEng_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).SearchByEng(ctx, req.(*SearchByEngRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cards_ServiceDesc is the grpc.ServiceDesc for Cards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noolingo.Cards",
	HandlerType: (*CardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchByID",
			Handler:    _Cards_SearchByID_Handler,
		},
		{
			MethodName: "SearchByRus",
			Handler:    _Cards_SearchByRus_Handler,
		},
		{
			MethodName: "SearchByEng",
			Handler:    _Cards_SearchByEng_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noolingo/cards.proto",
}

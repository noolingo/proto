// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: noolingo/deck.proto

package noolingo

import (
	context "context"
	common "github.com/noolingo/proto/codegen/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Deck_DeckCreate_FullMethodName = "/noolingo.Deck/DeckCreate"
	Deck_CardAdd_FullMethodName    = "/noolingo.Deck/CardAdd"
	Deck_CardDelete_FullMethodName = "/noolingo.Deck/CardDelete"
	Deck_DeckDelete_FullMethodName = "/noolingo.Deck/DeckDelete"
	Deck_DeckList_FullMethodName   = "/noolingo.Deck/DeckList"
)

// DeckClient is the client API for Deck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeckClient interface {
	DeckCreate(ctx context.Context, in *DeckCreateRequest, opts ...grpc.CallOption) (*DeckCreateResponse, error)
	CardAdd(ctx context.Context, in *CardAddRequest, opts ...grpc.CallOption) (*CardAddResponse, error)
	CardDelete(ctx context.Context, in *CardDeleteRequest, opts ...grpc.CallOption) (*common.Response, error)
	DeckDelete(ctx context.Context, in *DeckDeleteRequest, opts ...grpc.CallOption) (*common.Response, error)
	DeckList(ctx context.Context, in *DeckListRequest, opts ...grpc.CallOption) (*common.Response, error)
}

type deckClient struct {
	cc grpc.ClientConnInterface
}

func NewDeckClient(cc grpc.ClientConnInterface) DeckClient {
	return &deckClient{cc}
}

func (c *deckClient) DeckCreate(ctx context.Context, in *DeckCreateRequest, opts ...grpc.CallOption) (*DeckCreateResponse, error) {
	out := new(DeckCreateResponse)
	err := c.cc.Invoke(ctx, Deck_DeckCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckClient) CardAdd(ctx context.Context, in *CardAddRequest, opts ...grpc.CallOption) (*CardAddResponse, error) {
	out := new(CardAddResponse)
	err := c.cc.Invoke(ctx, Deck_CardAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckClient) CardDelete(ctx context.Context, in *CardDeleteRequest, opts ...grpc.CallOption) (*common.Response, error) {
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Deck_CardDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckClient) DeckDelete(ctx context.Context, in *DeckDeleteRequest, opts ...grpc.CallOption) (*common.Response, error) {
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Deck_DeckDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckClient) DeckList(ctx context.Context, in *DeckListRequest, opts ...grpc.CallOption) (*common.Response, error) {
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Deck_DeckList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeckServer is the server API for Deck service.
// All implementations must embed UnimplementedDeckServer
// for forward compatibility
type DeckServer interface {
	DeckCreate(context.Context, *DeckCreateRequest) (*DeckCreateResponse, error)
	CardAdd(context.Context, *CardAddRequest) (*CardAddResponse, error)
	CardDelete(context.Context, *CardDeleteRequest) (*common.Response, error)
	DeckDelete(context.Context, *DeckDeleteRequest) (*common.Response, error)
	DeckList(context.Context, *DeckListRequest) (*common.Response, error)
	mustEmbedUnimplementedDeckServer()
}

// UnimplementedDeckServer must be embedded to have forward compatible implementations.
type UnimplementedDeckServer struct {
}

func (UnimplementedDeckServer) DeckCreate(context.Context, *DeckCreateRequest) (*DeckCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeckCreate not implemented")
}
func (UnimplementedDeckServer) CardAdd(context.Context, *CardAddRequest) (*CardAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardAdd not implemented")
}
func (UnimplementedDeckServer) CardDelete(context.Context, *CardDeleteRequest) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardDelete not implemented")
}
func (UnimplementedDeckServer) DeckDelete(context.Context, *DeckDeleteRequest) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeckDelete not implemented")
}
func (UnimplementedDeckServer) DeckList(context.Context, *DeckListRequest) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeckList not implemented")
}
func (UnimplementedDeckServer) mustEmbedUnimplementedDeckServer() {}

// UnsafeDeckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeckServer will
// result in compilation errors.
type UnsafeDeckServer interface {
	mustEmbedUnimplementedDeckServer()
}

func RegisterDeckServer(s grpc.ServiceRegistrar, srv DeckServer) {
	s.RegisterService(&Deck_ServiceDesc, srv)
}

func _Deck_DeckCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeckCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServer).DeckCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deck_DeckCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServer).DeckCreate(ctx, req.(*DeckCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deck_CardAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServer).CardAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deck_CardAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServer).CardAdd(ctx, req.(*CardAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deck_CardDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServer).CardDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deck_CardDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServer).CardDelete(ctx, req.(*CardDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deck_DeckDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeckDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServer).DeckDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deck_DeckDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServer).DeckDelete(ctx, req.(*DeckDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deck_DeckList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeckListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServer).DeckList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deck_DeckList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServer).DeckList(ctx, req.(*DeckListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deck_ServiceDesc is the grpc.ServiceDesc for Deck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noolingo.Deck",
	HandlerType: (*DeckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeckCreate",
			Handler:    _Deck_DeckCreate_Handler,
		},
		{
			MethodName: "CardAdd",
			Handler:    _Deck_CardAdd_Handler,
		},
		{
			MethodName: "CardDelete",
			Handler:    _Deck_CardDelete_Handler,
		},
		{
			MethodName: "DeckDelete",
			Handler:    _Deck_DeckDelete_Handler,
		},
		{
			MethodName: "DeckList",
			Handler:    _Deck_DeckList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noolingo/deck.proto",
}
